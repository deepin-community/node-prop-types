Description: Fix errors related to babel configs e.t.c
Forwarded: not-needed
Last-Update: 2022-01-31
--- a/.babelrc
+++ b/.babelrc
@@ -1,3 +1,3 @@
 {
-  "presets": ["react"]
+  "presets": ["@babel/preset-react"]
 }
--- a/__tests__/PropTypesDevelopmentReact15.js
+++ b/__tests__/PropTypesDevelopmentReact15.js
@@ -22,19 +22,21 @@
 
 function getPropTypeWarningMessage(propTypes, object, componentName) {
   if (!console.error.calls) {
-    spyOn(console, 'error');
+    jest.spyOn(console, 'error');
   } else {
     console.error.calls.reset();
   }
   resetWarningCache();
 
   PropTypes.checkPropTypes(propTypes, object, 'prop', componentName);
-  const callCount = console.error.calls.count();
+
+  const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
+  const callCount = consoleErrorMock.mock.calls.length;
   if (callCount > 1) {
     throw new Error('Too many warnings.');
   }
-  const message = console.error.calls.argsFor(0)[0] || null;
-  console.error.calls.reset();
+  const message = consoleErrorMock.mock.calls.argsFor(0)[0] || null;
+  consoleErrorMock.mock.calls.reset();
 
   return message;
 }
@@ -95,23 +97,25 @@
   const props = {testProp: value};
   const propName = 'testProp' + Math.random().toString();
   const componentName = 'testComponent' + Math.random().toString();
+  const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
   for (let i = 0; i < 3; i++) {
     declaration(props, propName, componentName, 'prop');
   }
-  expect(console.error.calls.count()).toBe(1);
-  expect(console.error.calls.argsFor(0)[0]).toContain(
+  expect(consoleErrorMock.mock.calls.length).toBe(1);
+  expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain(
     'You are manually calling a React.PropTypes validation ',
   );
-  console.error.calls.reset();
+  consoleErrorMock.mock.calls.reset();
 }
 
 function expectInvalidValidatorWarning(declaration, type) {
+  const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
   PropTypes.checkPropTypes({ foo: declaration }, { foo: {} }, 'prop', 'testComponent', null);
-  expect(console.error.calls.argsFor(0)[0]).toEqual(
+  expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toEqual(
     'Warning: Failed prop type: testComponent: prop type `foo.bar` is invalid; '
     + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
   );
-  console.error.calls.reset();
+  consoleErrorMock.mock.calls.reset();
 }
 
 describe('PropTypesDevelopmentReact15', () => {
@@ -121,7 +125,7 @@
 
   describe('checkPropTypes', () => {
     it('should warn for invalid validators', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -131,7 +135,7 @@
         'testComponent',
         null,
       );
-      expect(console.error.calls.argsFor(0)[0]).toEqual(
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toEqual(
         'Warning: Failed prop type: testComponent: prop type `foo` is invalid; ' +
         'it must be a function, usually from the `prop-types` package, but received `undefined`.' +
         'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
@@ -139,7 +143,7 @@
     });
 
     it('should only warn once for identical validator failures', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -156,12 +160,12 @@
         'testComponent',
         null,
       );
-      expect(console.error.calls.count()).toEqual(1);
+      expect(consoleErrorMock.mock.calls.length).toEqual(1);
     });
 
     describe('checkPropTypes.resetWarningCache', () => {
       it('should reset warning cache', () => {
-        spyOn(console, 'error');
+        const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
         const propTypes = { foo: undefined };
         const props = { foo: 'foo' };
         PropTypes.checkPropTypes(
@@ -179,12 +183,12 @@
           'testComponent',
           null,
         );
-        expect(console.error.calls.count()).toEqual(2);
+        expect(consoleErrorMock.mock.calls.length).toEqual(2);
       });
     });
 
     it('does not return a value from a validator', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = {
         foo(props, propName, componentName) {
           return new Error('some error');
@@ -198,12 +202,12 @@
         'testComponent',
         null,
       );
-      expect(console.error.calls.argsFor(0)[0]).toContain('some error');
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain('some error');
       expect(returnValue).toBe(undefined);
     });
 
     it('does not throw if validator throws', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = {
         foo(props, propName, componentName) {
           throw new Error('some error');
@@ -217,18 +221,18 @@
         'testComponent',
         null,
       );
-      expect(console.error.calls.argsFor(0)[0]).toContain('some error');
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain('some error');
       expect(returnValue).toBe(undefined);
     });
 
     it('warns if any of the propTypes is not a function', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = {
         foo: PropTypes.invalid_type,
       };
       const props = { foo: 'foo' };
       const returnValue = PropTypes.checkPropTypes(propTypes, props, 'prop', 'testComponent', null);
-      expect(console.error.calls.argsFor(0)[0]).toEqual(
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toEqual(
         'Warning: Failed prop type: testComponent: prop type `foo` is invalid; ' +
         'it must be a function, usually from the `prop-types` package, but received `undefined`.' +
         'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
@@ -237,7 +241,7 @@
     });
 
     it('should warn for invalid validators inside shape', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: PropTypes.invalid_type }), 'undefined');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: true }), 'boolean');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: 'true' }), 'string');
@@ -245,7 +249,7 @@
     });
 
     it('should warn for invalid validators inside exact', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: PropTypes.invalid_type }), 'undefined');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: true }), 'boolean');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: 'true' }), 'string');
@@ -255,7 +259,7 @@
 
   describe('resetWarningCache', () => {
     it('should reset warning cache', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -273,7 +277,7 @@
         'testComponent',
         null,
       );
-      expect(console.error.calls.count()).toEqual(2);
+      expect(consoleErrorMock.mock.calls.length).toEqual(2);
     });
   });
 
@@ -358,7 +362,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.array, /please/);
       expectWarningInDevelopment(PropTypes.array, []);
       expectWarningInDevelopment(PropTypes.array.isRequired, /please/);
@@ -431,7 +435,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.any, null);
       expectWarningInDevelopment(PropTypes.any.isRequired, null);
       expectWarningInDevelopment(PropTypes.any.isRequired, undefined);
@@ -530,7 +534,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.arrayOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -604,7 +608,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.element, [<div />, <div />]);
       expectWarningInDevelopment(PropTypes.element, <div />);
       expectWarningInDevelopment(PropTypes.element, 123);
@@ -703,7 +707,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.instanceOf(Date), {});
       expectWarningInDevelopment(PropTypes.instanceOf(Date), new Date());
       expectWarningInDevelopment(PropTypes.instanceOf(Date).isRequired, {});
@@ -803,7 +807,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.node, 'node');
       expectWarningInDevelopment(PropTypes.node, {});
       expectWarningInDevelopment(PropTypes.node.isRequired, 'node');
@@ -942,7 +946,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.objectOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -962,12 +966,12 @@
 
   describe('OneOf Types', () => {
     it('should warn but not error for invalid argument', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
 
       PropTypes.oneOf('red');
 
-      expect(console.error).toHaveBeenCalled();
-      expect(console.error.calls.argsFor(0)[0]).toContain(
+      expect(consoleErrorMock).toHaveBeenCalled();
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain(
         'Invalid argument supplied to oneOf, expected an array.',
       );
 
@@ -975,12 +979,12 @@
     });
 
     it('should warn but not error for invalid multiple arguments', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
 
       PropTypes.oneOf('red', 'blue');
 
-      expect(console.error).toHaveBeenCalled();
-      expect(console.error.calls.argsFor(0)[0]).toContain(
+      expect(consoleErrorMock).toHaveBeenCalled();
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain(
         'Invalid arguments supplied to oneOf, expected an array, got 2 arguments. '
         + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).',
       );
@@ -1060,7 +1064,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), true);
       expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), null);
       expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), undefined);
@@ -1069,12 +1073,12 @@
 
   describe('Union Types', () => {
     it('should warn but not error for invalid argument', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
 
       PropTypes.oneOfType(PropTypes.string, PropTypes.number);
 
-      expect(console.error).toHaveBeenCalled();
-      expect(console.error.calls.argsFor(0)[0]).toContain(
+      expect(consoleErrorMock).toHaveBeenCalled();
+      expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain(
         'Invalid argument supplied to oneOfType, expected an instance of array.',
       );
 
@@ -1082,7 +1086,7 @@
     });
 
     it('should warn but for invalid argument type', () => {
-      spyOn(console, 'error');
+      const consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
 
       const types = [undefined, null, false, new Date, /foo/, {}];
       const expected = ['undefined', 'null', 'a boolean', 'a date', 'a regexp', 'an object'];
@@ -1090,12 +1094,12 @@
       for (let i = 0; i < expected.length; i++) {
         const type = types[i];
         PropTypes.oneOfType([type]);
-        expect(console.error).toHaveBeenCalled();
-        expect(console.error.calls.argsFor(0)[0]).toContain(
+        expect(consoleErrorMock).toHaveBeenCalled();
+        expect(consoleErrorMock.mock.calls.argsFor(0)[0]).toContain(
           'Invalid argument supplied to oneOfType. Expected an array of check functions, ' +
           'but received ' + expected[i] + ' at index 0.'
         );
-        console.error.calls.reset();
+        consoleErrorMock.mock.calls.reset();
       }
 
       typeCheckPass(PropTypes.oneOf(PropTypes.string, PropTypes.number), []);
@@ -1151,7 +1155,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(
         PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
         [],
@@ -1263,7 +1267,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.shape({}), 'some string');
       expectWarningInDevelopment(PropTypes.shape({foo: PropTypes.number}), {
         foo: 42,
@@ -1370,7 +1374,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectWarningInDevelopment(PropTypes.exact({}), 'some string');
       expectWarningInDevelopment(PropTypes.exact({foo: PropTypes.number}), {
         foo: 42,
--- a/__tests__/PropTypesDevelopmentStandalone-test.js
+++ b/__tests__/PropTypesDevelopmentStandalone-test.js
@@ -22,7 +22,7 @@
 
 function getPropTypeWarningMessage(propTypes, object, componentName) {
   if (!console.error.calls) {
-    spyOn(console, 'error');
+    jest.spyOn(console, 'error');
   } else {
     console.error.calls.reset();
   }
@@ -118,7 +118,7 @@
 
   describe('checkPropTypes', () => {
     it('should warn for invalid validators', () => {
-      spyOn(console, 'error')
+      jest.spyOn(console, 'error')
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -136,7 +136,7 @@
     });
 
     it('should only warn once for identical validator failures', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -158,7 +158,7 @@
 
     describe('checkPropTypes.resetWarningCache', () => {
       it('should reset warning cache', () => {
-        spyOn(console, 'error')
+        jest.spyOn(console, 'error')
         const propTypes = { foo: undefined };
         const props = { foo: 'foo' };
         PropTypes.checkPropTypes(
@@ -181,7 +181,7 @@
     });
 
     it('does not return a value from a validator', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       const propTypes = {
         foo(props, propName, componentName) {
           return new Error('some error');
@@ -200,7 +200,7 @@
     });
 
     it('does not throw if validator throws', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       const propTypes = {
         foo(props, propName, componentName) {
           throw new Error('some error');
@@ -219,7 +219,7 @@
     });
 
     it('warns if any of the propTypes is not a function', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       const propTypes = {
         foo: PropTypes.invalid_type,
       };
@@ -234,7 +234,7 @@
     });
 
     it('should warn for invalid validators inside shape', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: PropTypes.invalid_type }), 'undefined');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: true }), 'boolean');
       expectInvalidValidatorWarning(PropTypes.shape({ bar: 'true' }), 'string');
@@ -242,7 +242,7 @@
     });
 
     it('should warn for invalid validators inside exact', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: PropTypes.invalid_type }), 'undefined');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: true }), 'boolean');
       expectInvalidValidatorWarning(PropTypes.exact({ bar: 'true' }), 'string');
@@ -252,7 +252,7 @@
 
   describe('resetWarningCache', () => {
     it('should reset warning cache', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       const propTypes = { foo: undefined };
       const props = { foo: 'foo' };
       PropTypes.checkPropTypes(
@@ -355,7 +355,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.array, /please/);
       expectThrowsInDevelopment(PropTypes.array, []);
       expectThrowsInDevelopment(PropTypes.array.isRequired, /please/);
@@ -428,7 +428,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.any, null);
       expectThrowsInDevelopment(PropTypes.any.isRequired, null);
       expectThrowsInDevelopment(PropTypes.any.isRequired, undefined);
@@ -527,7 +527,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.arrayOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -601,7 +601,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.element, [<div />, <div />]);
       expectThrowsInDevelopment(PropTypes.element, <div />);
       expectThrowsInDevelopment(PropTypes.element, 123);
@@ -771,7 +771,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.instanceOf(Date), {});
       expectThrowsInDevelopment(PropTypes.instanceOf(Date), new Date());
       expectThrowsInDevelopment(PropTypes.instanceOf(Date).isRequired, {});
@@ -871,7 +871,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.node, 'node');
       expectThrowsInDevelopment(PropTypes.node, {});
       expectThrowsInDevelopment(PropTypes.node.isRequired, 'node');
@@ -1016,7 +1016,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.objectOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -1036,7 +1036,7 @@
 
   describe('OneOf Types', () => {
     it('should warn but not error for invalid argument', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       PropTypes.oneOf('red');
 
@@ -1049,7 +1049,7 @@
     });
 
     it('should warn but not error for invalid multiple arguments', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       PropTypes.oneOf('red', 'blue');
 
@@ -1134,7 +1134,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.oneOf(['red', 'blue']), true);
       expectThrowsInDevelopment(PropTypes.oneOf(['red', 'blue']), null);
       expectThrowsInDevelopment(PropTypes.oneOf(['red', 'blue']), undefined);
@@ -1143,7 +1143,7 @@
 
   describe('Union Types', () => {
     it('should warn but not error for invalid argument', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       PropTypes.oneOfType(PropTypes.string, PropTypes.number);
 
@@ -1156,7 +1156,7 @@
     });
 
     it('should warn but for invalid argument type', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       const types = [undefined, null, false, new Date, /foo/, {}];
       const expected = ['undefined', 'null', 'a boolean', 'a date', 'a regexp', 'an object'];
@@ -1225,7 +1225,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(
         PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
         [],
@@ -1337,7 +1337,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.shape({}), 'some string');
       expectThrowsInDevelopment(PropTypes.shape({foo: PropTypes.number}), {
         foo: 42,
@@ -1356,7 +1356,7 @@
 
   describe('Exact Types', () => {
     it('should warn for non objects', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(
         PropTypes.exact({}),
         'some string'
@@ -1441,7 +1441,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInDevelopment(PropTypes.exact({}), 'some string');
       expectThrowsInDevelopment(PropTypes.exact({foo: PropTypes.number}), {
         foo: 42,
--- a/__tests__/PropTypesProductionReact15-test.js
+++ b/__tests__/PropTypesProductionReact15-test.js
@@ -25,7 +25,7 @@
 
 function expectNoop(declaration, value) {
   if (!console.error.calls) {
-    spyOn(console, 'error');
+    jest.spyOn(console, 'error');
   } else {
     console.error.calls.reset();
   }
@@ -134,7 +134,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.array, /please/);
       expectNoop(PropTypes.array, []);
       expectNoop(PropTypes.array.isRequired, /please/);
@@ -207,7 +207,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.any, null);
       expectNoop(PropTypes.any.isRequired, null);
       expectNoop(PropTypes.any.isRequired, undefined);
@@ -306,7 +306,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.arrayOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -380,7 +380,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.element, [<div />, <div />]);
       expectNoop(PropTypes.element, <div />);
       expectNoop(PropTypes.element, 123);
@@ -479,7 +479,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.instanceOf(Date), {});
       expectNoop(PropTypes.instanceOf(Date), new Date());
       expectNoop(PropTypes.instanceOf(Date).isRequired, {});
@@ -579,7 +579,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.node, 'node');
       expectNoop(PropTypes.node, {});
       expectNoop(PropTypes.node.isRequired, 'node');
@@ -718,7 +718,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.objectOf({foo: PropTypes.string}), {
         foo: 'bar',
       });
@@ -738,7 +738,7 @@
 
   describe('OneOf Types', () => {
     it('should ignore invalid argument', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       PropTypes.oneOf('red', 'blue');
 
@@ -816,7 +816,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.oneOf(['red', 'blue']), true);
       expectNoop(PropTypes.oneOf(['red', 'blue']), null);
       expectNoop(PropTypes.oneOf(['red', 'blue']), undefined);
@@ -825,7 +825,7 @@
 
   describe('Union Types', () => {
     it('should ignore invalid argument', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       PropTypes.oneOfType(PropTypes.string, PropTypes.number);
 
@@ -883,7 +883,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(
         PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
         [],
@@ -1006,7 +1006,7 @@
     });
 
     it('should warn if called manually in development', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectNoop(PropTypes.shape({}), 'some string');
       expectNoop(PropTypes.shape({foo: PropTypes.number}), {
         foo: 42,
@@ -1169,7 +1169,7 @@
   describe('checkPropTypes', function() {
     describe('checkPropTypes.resetWarningCache', () => {
       it('should provide empty function', () => {
-        spyOn(console, 'error');
+        jest.spyOn(console, 'error');
 
         var spy = jest.fn();
         PropTypes.checkPropTypes.resetWarningCache();
@@ -1180,7 +1180,7 @@
 
   describe('resetWarningCache', () => {
     it('should provide empty function', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       var spy = jest.fn();
       PropTypes.resetWarningCache();
--- a/__tests__/PropTypesProductionStandalone-test.js
+++ b/__tests__/PropTypesProductionStandalone-test.js
@@ -31,7 +31,7 @@
 
   function getPropTypeWarningMessage(propTypes, object, componentName) {
     if (!console.error.calls) {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
     } else {
       console.error.calls.reset();
     }
@@ -243,7 +243,7 @@
 
   describe('Exact Types', () => {
     it('should warn for non objects', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
       expectThrowsInProduction(
         PropTypes.exact({}),
         'some string'
@@ -391,7 +391,7 @@
 
   describe('checkPropTypes', () => {
     it('does not call validators', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       const spy = jest.fn();
       typeCheckPass(PropTypes.string, 42);
@@ -402,7 +402,7 @@
 
     describe('checkPropTypes.resetWarningCache', () => {
       it('should provide empty function', () => {
-        spyOn(console, 'error');
+        jest.spyOn(console, 'error');
 
         var spy = jest.fn();
         PropTypes.checkPropTypes.resetWarningCache();
@@ -413,7 +413,7 @@
 
   describe('resetWarningCache', () => {
     it('should provide empty function', () => {
-      spyOn(console, 'error');
+      jest.spyOn(console, 'error');
 
       var spy = jest.fn();
       PropTypes.resetWarningCache();
--- a/package.json
+++ b/package.json
@@ -47,7 +47,7 @@
     "bundle-collapser": "^1.4.0",
     "eslint": "^8.6.0",
     "in-publish": "^2.0.1",
-    "jest": "^19.0.2",
+    "jest": "^27.4.7",
     "react": "^15.7.0",
     "uglifyify": "^5.0.2",
     "uglifyjs": "^2.4.11"
